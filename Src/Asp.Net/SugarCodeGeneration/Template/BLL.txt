using @Model.ClassNamespace;
using SqlSugar;
using System;
using System.Collections.Generic;
public class @(Model.Name)Manager : DbContext<@Model.Name>
{
 
    //如果要修改生成的默认增删查改方法，请修改SugarCodeGeneration项目下的BLL模版
    //我们如果有特殊需要可以重写DbContext中默认 增、删、查、改、方法
    //这里面写的代码不会给覆盖,如果要重新生成请删除 MyOrderManager.cs

    #region 教学方法
    /// <summary>
    /// 如果DbContext中的增删查改方法满足不了你，你可以看下该方法的具体用法
    /// </summary>
    public void Study()
    {

        //该方法介绍了  MyOrderDb 如可使用
        var data1 = MyOrderDb.GetById(1);//根据ID查询
        var data2 = MyOrderDb.GetList();//查询所有
        var data3 = MyOrderDb.GetList(it => 1 == 1);  //根据条件查询  
        //var data4 = MyOrderDb.GetSingle(it => 1 == 1);//根据条件查询一条,如果超过一条会报错

        var p = new PageModel() { PageIndex = 1, PageSize = 2 };// 分页查询
        var data5 = MyOrderDb.GetPageList(it => 1 == 1, p);
        Console.Write(p.PageCount);//返回总数


        // 分页查询加排序
        var data6 = MyOrderDb.GetPageList(it => 1 == 1, p, it => SqlFunc.GetRandom(), OrderByType.Asc);
        Console.Write(p.PageCount);//返回总数


        //组装条件查询作为条件实现 分页查询加排序
        List<IConditionalModel> conModels = new List<IConditionalModel>();
        conModels.Add(new ConditionalModel() { FieldName = typeof(MyOrder).GetProperties()[0].Name, ConditionalType = ConditionalType.Equal, FieldValue = "1" });//id=1
        var data7 = MyOrderDb.GetPageList(conModels, p, it => SqlFunc.GetRandom(), OrderByType.Asc);

        //4.9.7.5支持了转换成queryable,我们可以用queryable实现复杂功能
        MyOrderDb.AsQueryable().Where(x => 1 == 1).ToList();

        //我要用事务
        var result = Db.Ado.UseTran(() =>
          {
            //写事务代码

        });
        if (result.IsSuccess)
        {
            //事务成功
        }

        //多表查询地址
        //http://www.codeisbug.com/Doc/8/1124
    } 
    #endregion

 
 
}