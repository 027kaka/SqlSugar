<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SqlSugar" #>
<#@ import namespace="SyntacticSugar" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Web" #>
<#@ assembly name="$(SolutionDir)\WebTest\App_Lib\SqlSugar.dll" #>
<#@ assembly name="$(SolutionDir)\WebTest\App_Lib\SyntacticSugar.dll" #>

 
<#+ 
         public class GeneratingEntities
    {
        string _projectPath;
        string _solutionDir;
        ConfigHelper _cf;
		 List<KeyValue> _mappingTables;
        public GeneratingEntities(string projectPath, string solutionDir, List<KeyValue> mappingTables)
        {

            _projectPath = projectPath;
            _solutionDir = solutionDir;
			_mappingTables=mappingTables;
            _cf = new ConfigHelper(_projectPath.TrimEnd('\\') + @"\T4\SugarTemplate.xml");
        }


        public void CreateClass()
        {

            using (SqlSugarClient db = new SqlSugarClient(_cf.ConnectionString))
            {
			    db.SetMappingTables(_mappingTables);
                var solutionNamespaceAndDir = FileHelper.GetEntitiesNamespace(_solutionDir);
                //生成tables文件
                string tableDir = "{0}\\Tables".ToFormat(solutionNamespaceAndDir.Value);
                string tableNamespace = "{0}.Tables".ToFormat(solutionNamespaceAndDir.Key);
                db.ClassGenerating.CreateClassFiles(db, tableDir, tableNamespace, true,tableName=> {
                    FileHelper.ContainFileToCsproj("Tables\\{0}.cs".ToFormat(tableName),_solutionDir.TrimEnd('\\')+"\\", solutionNamespaceAndDir.Key);
                });
                //生成views文件
                string viewDir = "{0}\\Views".ToFormat(solutionNamespaceAndDir.Value);
                string viewNamespace = "{0}.Views".ToFormat(solutionNamespaceAndDir.Key);
                db.ClassGenerating.CreateClassFiles(db, viewDir, viewNamespace, false, tableName => {
                    FileHelper.ContainFileToCsproj("Views\\{0}.cs".ToFormat(tableName), _solutionDir.TrimEnd('\\') + "\\", solutionNamespaceAndDir.Key);
                });
            }
        }

        
    }

    public class FileHelper
    {
        /// <summary>
        /// 返回实体命名空间和路径，key为命名空间value为路径
        /// </summary>
        /// <param name="solutionDir"></param>
        /// <returns></returns>
        public static KeyValuePair<string, string> GetEntitiesNamespace(string solutionDir)
        {
            var entitiesDir = FileSugar.GetDirectories(solutionDir).First(it => it.Contains(".Entities"));
            KeyValuePair<string, string> reval = new KeyValuePair<string, string>(entitiesDir.Split('\\').Last(), entitiesDir);
            return reval;
        }
        // 包含到项目文件中
        public static void ContainFileToCsproj(string fileName, string solutionDir, string csprojName)
        {
            string path = solutionDir + csprojName + @"\" + csprojName + ".csproj";

            XDocument doc = XDocument.Load(path);
            XElement root = doc.Root;
            string xmlns = "{" + root.Attribute("xmlns").Value + "}";
            IEnumerable<XElement> compileList = root.Elements(xmlns + "ItemGroup").Elements(xmlns + "Compile");
            XElement itemGroup = compileList.FirstOrDefault().Parent;
            if (compileList.Where(u => u.Attribute("Include").Value == fileName).Count() > 0)
            {
                compileList.Where(u => u.Attribute("Include").Value == fileName).Remove();
            }

            XElement compile = new XElement(xmlns + "Compile");
            compile.SetAttributeValue("Include", fileName);
            itemGroup.AddFirst(compile);
            doc.Save(path);
        }

    }

    public class ConfigHelper
    {
        private ConfigHelper() { }
        private string _sugarTemplateXmlPath;
        public ConfigHelper(string sugarTemplateXmlPath)
        {
            _sugarTemplateXmlPath = sugarTemplateXmlPath;
        }

        private string this[string key]
        {
            get
            {
                var xmlObj = XElement.Load(_sugarTemplateXmlPath);
                var reval = xmlObj.Descendants("add").Single(it => it.Attribute("key").Value == key).Value;
                return reval;
            }
        }

        public string ConnectionString
        {
            get
            {
                return this["connectionString"];
            }
        }
    }


    
 #>